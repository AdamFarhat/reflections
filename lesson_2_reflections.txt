What happens when you initialize a repository? Why do you need to do it?	

By initializing a new repository, you set up the environment to start using version control on in that folder (now repository). 

How is the staging area different from the working directory and the repository? What value do you think it offers?

The staging area allows you properly prepare for a commit. It bundles up all the changed file and lets you modify them before commiting to the...commit.

How can you use the staging area to make sure you have one commit per logical change?

The you have to manually add the changes to the staging area. So if you notice that your changes have affected multiple files then you must likely havem ore than one logical change. So you add then commit one logical change at a time.

What are some situations where branches would be helpful in keeping your history organized? How would branches help?

Branches are useful when you want to break off the master branch and try out new feature that may or may not be included in the final product.

How do the diagrams help you visualize the branch structure?

They allow you to easily visualize where branch break off the master generally making it easier to follow and understand where changes where made.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

By merging two branch, you combine the work that has been done on both of them. They look like that in the diagram to show that the branches that had been seperate, have no been reunited into one.

What are the pros and cons of Git's automatic merging vs. always doing merges manually?

One is pros of the auto merge is that it saves you time by doing the obvious changes without having to intervene. The con is that it might be something cryptic to read the merge info.